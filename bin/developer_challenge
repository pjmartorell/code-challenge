#!/usr/bin/env ruby

require 'optparse'
require File.expand_path('../../lib/slow_api', __FILE__)
require File.expand_path('../../lib/minimum_path_sum', __FILE__)
require File.expand_path('../../lib/minimum_path_sum_twisted', __FILE__)

options = {}

opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: developer_challenge options"
  opts.separator  ""
  opts.separator  "Tests"
  opts.separator  "     slowapi: retrieve a given number of requests from 'http://slowapi.com/delay/0.3'"
  opts.separator  "     minimum_path_sum: find the minimum path sum given a triangle"
  opts.separator  ""
  opts.separator  "Options"

  opts.on("-t", "--test test_name", String, "Test to perform") do |test|
    options[:test] = test
  end

  opts.on("-n","--number requests", Integer, "Number of requests to perform") do |number|
    options[:number] = number
  end

  opts.on( '-f', '--filename output_file', 'Output collected data to a file' ) do |file|
    options[:filename] = file
  end

  opts.on( '--twisted', 'Run minimum path sum test in twisted mode' ) do
    options[:twisted] = true
  end

  opts.on_tail("-h","--help","Display usage information (this message)") do
    puts opts
    exit
  end
end

begin
  opt_parser.parse!
  mandatory = [:filename, :test]
  missing = mandatory.select{ |param| options[param].nil? }
  raise OptionParser::MissingArgument, missing.join(', ') unless missing.empty?

  case options[:test]
  when "slowapi"
    file = File.open(options[:filename], 'w')
    raise OptionParser::MissingArgument, :number unless options[:number]
    SlowApi.retrieve(options[:number], file)
  when "minimum_path_sum"
    file = File.open(options[:filename], 'r')
    if options[:twisted]
      puts MinimumPathSumTwisted.calculate(file)
    else
      puts MinimumPathSum.calculate(file)
    end
  else
    puts opt_parser
  end
rescue OptionParser::ParseError => e
  puts e
  puts opt_parser
  exit
ensure
  file.close unless file.nil?
end